'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.qs = qs;
exports.upperFirst = upperFirst;
exports.trimEnd = trimEnd;
exports.requestSingle = requestSingle;
exports.fetchSingle = fetchSingle;
exports.requestAll = requestAll;
exports.fetchAll = fetchAll;
function qs(params) {
	var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	return Object.keys(params).sort().map(function (key) {
		var encode = encodeURIComponent;

		if (Array.isArray(params[key])) {
			return params[key].map(function (value, i) {
				if (!parent) {
					return encode(key) + '[' + encode(i) + ']=' + encode(value);
				}

				return encode(parent) + '[' + encode(key) + '][' + encode(i) + ']=' + encode(value);
			}).join('&');
		} else if (_typeof(params[key]) === 'object') {
			return qs(params[key], key);
		}

		return !parent ? encode(key) + '=' + encode(params[key]) : encode(parent) + '[' + encode(key) + ']=' + encode(params[key]);
	}).join('&');
}

function upperFirst(name) {
	return name.split(/( |-|_)/).filter(function (item) {
		return item !== ' ' && item !== '-' && item !== '_';
	}).map(function (item) {
		return item.toLowerCase();
	}).map(function (item) {
		return item[0].toUpperCase() + item.slice(1);
	}).join('');
}
function trimEnd(message, char) {
	return message[message.length - 1] === char ? trimEnd(message.slice(0, -1), char) : message;
}

function requestSingle(url) {
	var requestPromise = new Promise(function (resolve, reject) {
		fetch(url).then(function (response) {
			if (response.ok) {
				response.json().then(function (json) {
					return resolve({ json: json, response: response });
				}).catch(function (error) {
					return reject(error);
				});
			} else {
				reject(response.statusText);
			}
		}).catch(reject);
	});

	return requestPromise;
}

function fetchSingle(url, success, error) {
	return requestSingle(url).then(success).catch(error);
}

function requestAll(url) {
	var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	var fetchPage = function fetchPage(pagenum, data, resolve, reject) {
		fetch(url + '?' + qs(Object.assign({ per_page: 100 }, params, { page: pagenum }))).then(function (response) {
			if (response.ok) {
				response.json().then(function (items) {
					items.forEach(function (item) {
						return data.push(item);
					});

					var totalpages = parseInt(response.headers.get('X-WP-TotalPages'), 10);
					if (isNaN(totalpages)) {
						totalpages = 0;
					}

					if (pagenum >= totalpages) {
						resolve({ json: data, response: response });
					} else {
						fetchPage(pagenum + 1, data, resolve, reject);
					}
				}).catch(function (error) {
					return reject(error);
				});
			} else {
				reject(response.statusText);
			}
		}).catch(function (error) {
			return reject(error);
		});
	};

	return new Promise(function (resolve, reject) {
		return fetchPage(params.page || 1, [], resolve, reject);
	});
}

function fetchAll(url, params, onSuccess, onError) {
	return requestAll(url, params).then(onSuccess).catch(onError);
}

exports.default = {
	qs: qs,
	fetchSingle: fetchSingle,
	fetchAll: fetchAll
};