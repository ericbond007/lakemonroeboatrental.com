'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = createActions;

var _helpers = require('./helpers');

var getSuccessAction = function getSuccessAction(json, response, type, params) {
	var action = {
		type: type,
		ok: true,
		results: json,
		params: params
	};

	if (response) {
		var totalPages = parseInt(response.headers.get('X-WP-TotalPages'), 10);
		if (!isNaN(totalPages)) {
			action.totalPages = totalPages;
		}

		var total = parseInt(response.headers.get('X-WP-Total'), 10);
		if (!isNaN(total)) {
			action.total = total;
		}
	}

	return action;
};

var getSuccessHandler = function getSuccessHandler(dispatch, type, params) {
	return function (data) {
		dispatch(getSuccessAction(data.json, data.response, type, params));
	};
};

var getSuccessHandlerById = function getSuccessHandlerById(dispatch, type, id, params) {
	return function (data) {
		var action = getSuccessAction(data.json, data.response, type, params);
		action.id = id;
		dispatch(action);
	};
};

var getErrorHandler = function getErrorHandler(dispatch, type, params) {
	return function (error) {
		dispatch({
			type: type,
			ok: false,
			message: error,
			params: params
		});
	};
};

var getErrorHandlerById = function getErrorHandlerById(dispatch, type, id, params) {
	return function (error) {
		dispatch({
			type: type,
			ok: false,
			message: error,
			id: id,
			params: params
		});
	};
};

function createActions(name, host, endpoints) {
	var args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	var options = args;

	// fallback for previous version of this function where the last param was
	// for namespace argument
	if (typeof args === 'string') {
		options = { namespace: args };
	}

	var actions = {};
	var normalizedHost = (0, _helpers.trimEnd)(host, '/');
	var namespace = options.namespace || 'wp/v2';

	endpoints.forEach(function (endpoint) {
		var endpointName = (0, _helpers.upperFirst)(endpoint);

		if (options.fetch !== false) {
			actions['fetch' + endpointName] = function () {
				var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
				return function (dispatch) {
					var type = '@@wp/' + name + '/fetched/' + endpoint;

					dispatch({
						type: '@@wp/' + name + '/fetching/' + endpoint,
						params: params
					});

					return (0, _helpers.fetchSingle)(normalizedHost + '/' + namespace + '/' + endpoint + '?' + (0, _helpers.qs)(params), getSuccessHandler(dispatch, type, params), getErrorHandler(dispatch, type, params));
				};
			};
		}

		if (options.fetchEndpoint !== false) {
			actions['fetch' + endpointName + 'Endpoint'] = function (endpoint2) {
				var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
				return function (dispatch) {
					var type = '@@wp/' + name + '/fetched/' + endpoint + '/' + endpoint2;

					dispatch({
						type: '@@wp/' + name + '/fetching/' + endpoint + '/' + endpoint2,
						params: params
					});

					return (0, _helpers.fetchSingle)(normalizedHost + '/' + namespace + '/' + endpoint + '/' + endpoint2 + '?' + (0, _helpers.qs)(params), getSuccessHandler(dispatch, type, params), getErrorHandler(dispatch, type, params));
				};
			};
		}

		if (options.fetchById !== false) {
			actions['fetch' + endpointName + 'ById'] = function (id) {
				var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
				return function (dispatch) {
					var type = '@@wp/' + name + '/fetched-by-id/' + endpoint;

					dispatch({
						type: '@@wp/' + name + '/fetching-by-id/' + endpoint,
						id: id,
						params: params
					});

					return (0, _helpers.fetchSingle)(normalizedHost + '/' + namespace + '/' + endpoint + '/' + id + '?' + (0, _helpers.qs)(params), getSuccessHandlerById(dispatch, type, id, params), getErrorHandlerById(dispatch, type, id, params));
				};
			};
		}

		if (options.fetchEndpointById !== false) {
			actions['fetch' + endpointName + 'EndpointById'] = function (id, endpoint2) {
				var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
				return function (dispatch) {
					var type = '@@wp/' + name + '/fetched-by-id/' + endpoint + '/' + endpoint2;

					dispatch({
						type: '@@wp/' + name + '/fetching-by-id/' + endpoint + '/' + endpoint2,
						id: id,
						params: params
					});

					return (0, _helpers.fetchSingle)(normalizedHost + '/' + namespace + '/' + endpoint + '/' + id + '/' + endpoint2 + '?' + (0, _helpers.qs)(params), getSuccessHandlerById(dispatch, type, id, params), getErrorHandlerById(dispatch, type, id, params));
				};
			};
		}

		if (options.fetchAll !== false) {
			actions['fetchAll' + endpointName] = function () {
				var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
				return function (dispatch) {
					var type = '@@wp/' + name + '/fetched-all/' + endpoint;

					dispatch({
						type: '@@wp/' + name + '/fetching-all/' + endpoint,
						params: params
					});

					return (0, _helpers.fetchAll)(normalizedHost + '/' + namespace + '/' + endpoint, params, getSuccessHandler(dispatch, type, params), getErrorHandler(dispatch, type, params));
				};
			};
		}

		if (options.fetchAllEndpoint !== false) {
			actions['fetchAll' + endpointName + 'Endpoint'] = function (endpoint2) {
				var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
				return function (dispatch) {
					var type = '@@wp/' + name + '/fetched-all/' + endpoint + '/' + endpoint2;

					dispatch({
						type: '@@wp/' + name + '/fetching-all/' + endpoint + '/' + endpoint2,
						params: params
					});

					return (0, _helpers.fetchAll)(normalizedHost + '/' + namespace + '/' + endpoint + '/' + endpoint2, params, getSuccessHandler(dispatch, type, params), getErrorHandler(dispatch, type, params));
				};
			};
		}

		if (options.fetchAllEndpointById !== false) {
			actions['fetchAll' + endpointName + 'EndpointById'] = function (id, endpoint2) {
				var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
				return function (dispatch) {
					var type = '@@wp/' + name + '/fetched-all-by-id/' + endpoint + '/' + endpoint2;

					dispatch({
						type: '@@wp/' + name + '/fetching-all-by-id/' + endpoint + '/' + endpoint2,
						id: id,
						params: params
					});

					return (0, _helpers.fetchAll)(normalizedHost + '/' + namespace + '/' + endpoint + '/' + id + '/' + endpoint2, params, getSuccessHandlerById(dispatch, type, id, params), getErrorHandlerById(dispatch, type, id, params));
				};
			};
		}
	});

	return actions;
}